rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all user data
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
                     
      // Allow user creation during signup
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == userId &&
                       request.resource.data.role == 'user';
    }
    
    // Tasks collection rules
    match /tasks/{taskId} {
      // Users can only access their own tasks
      allow read, write: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
      
      // Allow creating tasks with proper userId
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
      
      // Admins can read all tasks
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidUser(userData) {
      return userData.keys().hasAll(['uid', 'email', 'displayName', 'role', 'createdAt']) &&
             userData.uid is string &&
             userData.email is string &&
             userData.displayName is string &&
             userData.role in ['user', 'admin'] &&
             userData.createdAt is timestamp;
    }
    
    function isValidTask(taskData) {
      return taskData.keys().hasAll(['title', 'description', 'userId', 'status', 'priority', 'dueDate', 'createdAt', 'updatedAt']) &&
             taskData.title is string &&
             taskData.description is string &&
             taskData.userId is string &&
             taskData.status in ['pending', 'completed', 'cancelled'] &&
             taskData.priority in ['low', 'medium', 'high'] &&
             taskData.dueDate is timestamp &&
             taskData.createdAt is timestamp &&
             taskData.updatedAt is timestamp;
    }
  }
}